<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.goodee.gym.mapper.MyPageMapper">

	<!-- 다가올 수업 -->
	<select id="selectCommingReservationsByNo" parameterType="Map" resultType="reservationDTO">
		SELECT C.CLASS_DATE, C.CLASS_TIME, R.RN, R.RESERVATION_CODE, R.MEMBER_NO, R.CLASS_CODE, R.RESERVATION_DATE, R.RESERVATION_STATE
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY CLASS_CODE) AS RN, RESERVATION_CODE, MEMBER_NO, CLASS_CODE, RESERVATION_DATE, RESERVATION_STATE
		          FROM RESERVATION
		         WHERE RESERVATION_STATE = 0
		           AND MEMBER_NO = #{memberNo}
		           AND RESERVATION_CODE LIKE '${subject}%') R JOIN CLASS C
		    ON R.CLASS_CODE = C.CLASS_CODE
		 ORDER BY R.RN
	</select>

	<!-- 다가올 수업 갯수 -->
	<select id="selectCommingCount" parameterType="Map" resultType="Integer">
		SELECT COUNT(*)
		  FROM RESERVATION
		 WHERE MEMBER_NO = #{memberNo}
		   AND RESERVATION_CODE LIKE '${subject}%'
		   AND RESERVATION_STATE = 0
	</select>
	
	<!-- 예약취소 - 예약상태 업데이트 -->
	<update id="updateReservation" parameterType="String">
		UPDATE RESERVATION
		   SET RESERVATION_STATE = -1
		 WHERE RESERVATION_CODE = #{reservationCode}
	</update>
	
	<!-- 예약취소 - 잔여수강권 +1 -->
	<update id="updateRemainTicket" parameterType="String">
		UPDATE REMAIN_TICKET
		   SET REMAIN_TICKET_REMAIN_COUNT = REMAIN_TICKET_REMAIN_COUNT + 1
		 WHERE MEMBER_ID = #{memberId}
		   AND REMAIN_TICKET_SUBJECT = #{remainTicketSubject}
	</update>

	<!-- 지난 수업 -->
	<select id="selectOverReservationsByNo" parameterType="Map" resultType="reservationDTO">
		SELECT C.CLASS_DATE, C.CLASS_TIME, R.RN, R.RESERVATION_CODE, R.MEMBER_NO, R.CLASS_CODE, R.RESERVATION_DATE, R.RESERVATION_STATE
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY CLASS_CODE DESC) AS RN, RESERVATION_CODE, MEMBER_NO, CLASS_CODE, RESERVATION_DATE, RESERVATION_STATE
		          FROM RESERVATION 
		         WHERE RESERVATION_STATE = 1
		           AND MEMBER_NO = #{memberNo}) R JOIN CLASS C
		    ON R.CLASS_CODE = C.CLASS_CODE
		 WHERE R.RN BETWEEN #{beginRecord} AND #{endRecord}
		 ORDER BY R.RN
	</select>
	
	<!-- 지난 수업 갯수 -->
	<select id="selectOverCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*)
		  FROM RESERVATION
		 WHERE MEMBER_NO = #{memberNo}
		   AND RESERVATION_STATE = 1
	</select>
	
	<resultMap type="TicketDTO" id="TicketMap">
		<result column="TICKET_SUBJECT" property="ticketSubject" />
		<result column="TICKET_COUNT" property="ticketCount" />
		<result column="TICKET_PERIOD" property="ticketPeriod" />
		<result column="TICKET_PRICE" property="ticketPrice" />
	</resultMap>
	
	<resultMap type="PayListDTO" id="PayListMap">
		<result column="PAYLIST_NO" property="payListNo" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="TICKET_NO" property="ticketNo" />
		<result column="PAYLIST_DATE" property="payListDate" />
		<result column="RN" property="rn" />
		<collection resultMap="TicketMap" property="ticket" />
	</resultMap>
	
	<!-- 마이페이지 - 결제내역조회 -->
	<select id="selectPayList" parameterType="Map" resultMap="PayListMap">
		SELECT P.RN, P.PAYLIST_NO, P.MEMBER_NO, P.TICKET_NO, P.PAYLIST_DATE, T.TICKET_SUBJECT, T.TICKET_PERIOD, T.TICKET_COUNT, T.TICKET_PRICE
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY PAYLIST_DATE DESC, PAYLIST_NO DESC) AS RN, PAYLIST_NO, MEMBER_NO, TICKET_NO, PAYLIST_DATE
		  	      FROM PAYLIST
		  	     WHERE MEMBER_NO = #{memberNo}) P JOIN TICKET T
		  	ON P.TICKET_NO = T.TICKET_NO
		 ORDER BY P.RN
	</select>
	
	<!-- 동일 종목 추가 결제를 위한 결제내역조회(만료일 지나지 않음) -->
	<select id="selectValidPayList" parameterType="Map" resultMap="PayListMap">
		SELECT P.RN, P.PAYLIST_NO, P.MEMBER_NO, P.TICKET_NO, P.PAYLIST_DATE, T.TICKET_SUBJECT, T.TICKET_PERIOD, T.TICKET_COUNT, T.TICKET_PRICE, (P.PAYLIST_DATE + T.TICKET_PERIOD) AS DUEDATE
      	  FROM (SELECT ROW_NUMBER() OVER(ORDER BY PAYLIST_DATE DESC, PAYLIST_NO DESC) AS RN, PAYLIST_NO, MEMBER_NO, TICKET_NO, PAYLIST_DATE
                  FROM PAYLIST
                 WHERE MEMBER_NO = #{memberNo}) P JOIN TICKET T
            ON P.TICKET_NO = T.TICKET_NO
         WHERE (P.PAYLIST_DATE + T.TICKET_PERIOD) >= SYSDATE
         ORDER BY P.RN
	</select>
	
	<!-- 동일 종목 추가 결제시 만료일, 잔여횟수 증가 -->
	<update id="updateTicket" parameterType="TicketDTO">
		UPDATE REMAIN_TICKET 
		   SET REMAIN_TICKET_END_DATE = REMAIN_TICKET_END_DATE + #{ticketPeriod},
		       REMAIN_TICKET_REMAIN_COUNT = REMAIN_TICKET_REMAIN_COUNT + #{ticketCount}
		 WHERE MEMBER_ID = (SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_NO = #{memberNo}) AND REMAIN_TICKET_SUBJECT = #{ticketSubject}
		   AND REMAIN_TICKET_END_DATE >= SYSDATE
	</update>

	<!-- 비밀번호 일치하는지 조회 -->                                                                                                                                                                                                                                                                                                                                                           
	<select id="selectMemberPwByNo" parameterType="Long" resultType="String">
		SELECT MEMBER_PW
		  FROM MEMBER
		 WHERE MEMBER_NO = #{memberNo}
	</select>

	<!-- 비밀번호 수정 -->
	<update id="updatePw" parameterType="memberDTO">
		UPDATE MEMBER
		   SET MEMBER_PW = #{memberPw}, MEMBER_PW_MODIFIED = SYSDATE
		 WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 개인정보 수정 (이메일, 연락처) -->
	<update id="updateMyInfo" parameterType="memberDTO">
		UPDATE MEMBER
		   SET MEMBER_EMAIL = #{memberEmail},
		   	   MEMBER_PHONE = #{memberPhone}
		 WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 세션 업데이트를 위한 개인정보 불러오기 -->
	<select id="selectMemberById" parameterType="Long" resultType="MemberDTO">
		SELECT MEMBER_NO, MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_BIRTH, MEMBER_GENDER, MEMBER_PHONE, MEMBER_EMAIL, MEMBER_AGREE_STATE, MEMBER_SIGN_UP, MEMBER_PW_MODIFIED
		  FROM MEMBER
		 WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 소멸기간이 지나지 않은 잔여 수강권 목록 -->
	<select id="selectTicketsById" parameterType="String" resultType="RemainTicketDTO">
		SELECT REMAIN_TICKET_NO, MEMBER_ID, REMAIN_TICKET_SUBJECT, REMAIN_TICKET_END_DATE, REMAIN_TICKET_REMAIN_COUNT
		  FROM REMAIN_TICKET
		 WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="Long">
		DELETE
		  FROM MEMBER
		 WHERE MEMBER_NO = #{memberNo}
	</delete>
	
	<!-- 비밀번호 변경일 -->
	<select id="selectPwModified" parameterType="String" resultType="Double">
		SELECT MONTHS_BETWEEN(SYSDATE, MEMBER_PW_MODIFIED)
		  FROM MEMBER 
		 WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- 수업시간이 지나면 예약상태 1로 업데이트 -->
	<update id="updateReservationState">
		UPDATE RESERVATION R
		   SET RESERVATION_STATE = 1
		 WHERE EXISTS(
		 		SELECT 1
		 		  FROM CLASS C
				 WHERE R.CLASS_CODE = C.CLASS_CODE 
				   AND RESERVATION_STATE = 0 
				   AND SYSDATE >= TO_DATE(C.CLASS_DATE || REPLACE(C.CLASS_TIME, ':', ''), 'YYYYMMDDHH24MI')
		)
	</update>
	
	
</mapper>