DROP TABLE IF EXISTS SIGN_OUT_MEMBER;
DROP TABLE IF EXISTS MEMBER_LOG;
DROP TABLE IF EXISTS PAYLIST;
DROP TABLE IF EXISTS TICKET;
DROP TABLE IF EXISTS REMAIN_TICKET;
DROP TABLE IF EXISTS ANSWER;
DROP TABLE IF EXISTS QUESTION;
DROP TABLE IF EXISTS REVIEW;
DROP TABLE IF EXISTS NOTICE_FILE_ATTACH;
DROP TABLE IF EXISTS NOTICE;
DROP TABLE IF EXISTS RESERVATION;
DROP TABLE IF EXISTS CLASS;
DROP TABLE IF EXISTS LOCATION;
DROP TABLE IF EXISTS TEACHER;
DROP TABLE IF EXISTS MEMBER;
CREATE TABLE MEMBER
(
    MEMBER_NO DOUBLE NOT NULL AUTO_INCREMENT,
    MEMBER_ID VARCHAR(50) NOT NULL UNIQUE,
    MEMBER_PW VARCHAR(64) NOT NULL,
    MEMBER_NAME VARCHAR(20) NOT NULL,
    MEMBER_BIRTH VARCHAR(10),
    MEMBER_GENDER VARCHAR(1),
    MEMBER_PHONE VARCHAR(15) NOT NULL,
    MEMBER_EMAIL VARCHAR(200),
    MEMBER_AGREE_STATE DOUBLE NOT NULL,
    MEMBER_SIGN_UP DATETIME NOT NULL,
    MEMBER_PW_MODIFIED DATETIME NOT NULL,
    MEMBER_STATE DOUBLE,
    CONSTRAINT MEMBER_PK PRIMARY KEY(MEMBER_NO)
);
CREATE TABLE MEMBER_LOG
(
    MEMBER_LOG_NO DOUBLE NOT NULL AUTO_INCREMENT,
    MEMBER_NO DOUBLE NOT NULL,
    MEMBER_LOG_SIGN_IN DATETIME NOT NULL,
    CONSTRAINT MEMBER_LOG_PK PRIMARY KEY(MEMBER_LOG_NO)
);
CREATE TABLE SIGN_OUT_MEMBER
(
    SIGN_OUT_MEMBER_NO DOUBLE NOT NULL AUTO_INCREMENT,
    MEMBER_NO DOUBLE NOT NULL,
    MEMBER_ID VARCHAR(50) NOT NULL UNIQUE,
    MEMBER_NAME VARCHAR(20) NOT NULL,
    MEMBER_BIRTH VARCHAR(10),
    MEMBER_GENDER VARCHAR(1),
    MEMBER_PHONE VARCHAR(15) NOT NULL,
    MEMBER_EMAIL VARCHAR(200),
    MEMBER_AGREE_STATE DOUBLE NOT NULL,
    MEMBER_SIGN_UP DATETIME NOT NULL,
    SIGN_OUT_MEMBER_SIGN_OUT DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT SIGN_OUT_MEMBER_PK PRIMARY KEY(SIGN_OUT_MEMBER_NO)
);
CREATE TABLE TEACHER
(
    TEACHER_NO DOUBLE NOT NULL AUTO_INCREMENT,
    TEACHER_NAME VARCHAR(20) NOT NULL,
    TEACHER_GENDER VARCHAR(1) NOT NULL,
    TEACHER_SUBJECT VARCHAR(100) NOT NULL,
    CONSTRAINT TEACHER_PK PRIMARY KEY(TEACHER_NO)
);
CREATE TABLE CLASS
(
    CLASS_CODE VARCHAR(100) NOT NULL,
    TEACHER_NO DOUBLE NOT NULL,
    LOCATION_CODE VARCHAR(30) NOT NULL,
    CLASS_DATE VARCHAR(30) NOT NULL,
    CLASS_TIME VARCHAR(5) NOT NULL,
    CONSTRAINT CLASS_PK PRIMARY KEY(CLASS_CODE)
);
CREATE TABLE LOCATION
(
    LOCATION_CODE VARCHAR(30) NOT NULL,
    LOCATION_LIMIT DOUBLE NOT NULL,
    CONSTRAINT LOCATION_PK PRIMARY KEY(LOCATION_CODE)
);
CREATE TABLE RESERVATION
(
    RESERVATION_CODE VARCHAR(30) NOT NULL,
    MEMBER_NO DOUBLE NOT NULL,
    CLASS_CODE VARCHAR(100) NOT NULL,
    RESERVATION_DATE DATETIME(6) NOT NULL,
    RESERVATION_STATE DOUBLE NOT NULL,
    CONSTRAINT RESERVATION_PK PRIMARY KEY(RESERVATION_CODE)
);
CREATE TABLE RESERVATION_SEQ
(
   RESERVE_SEQ DOUBLE NOT NULL AUTO_INCREMENT,
   CONSTRAINT RESERVATION_SEQ_PK PRIMARY KEY(RESERVE_SEQ)
);
CREATE TABLE TICKET
(
    TICKET_NO DOUBLE NOT NULL AUTO_INCREMENT,
    TICKET_SUBJECT VARCHAR(100) NOT NULL,
    TICKET_COUNT DOUBLE NOT NULL,
    TICKET_PERIOD DOUBLE NOT NULL,
    TICKET_PRICE VARCHAR(20) NOT NULL,
    CONSTRAINT TICKET_PK PRIMARY KEY(TICKET_NO)
);
CREATE TABLE REMAIN_TICKET
(
    REMAIN_TICKET_NO DOUBLE NOT NULL AUTO_INCREMENT,
    MEMBER_ID VARCHAR(32) NOT NULL,
    REMAIN_TICKET_SUBJECT VARCHAR(100) NOT NULL,
    REMAIN_TICKET_END_DATE DATETIME NOT NULL,
    REMAIN_TICKET_REMAIN_COUNT DOUBLE NOT NULL,
    CONSTRAINT REMAIN_TICKET_PK PRIMARY KEY(REMAIN_TICKET_NO)
);
CREATE TABLE PAYLIST
(
    PAYLIST_NO DOUBLE NOT NULL AUTO_INCREMENT,
    MEMBER_NO DOUBLE NOT NULL,
    TICKET_NO DOUBLE NOT NULL,
    PAYLIST_DATE DATETIME NOT NULL,
    CONSTRAINT PAYLIST_PK PRIMARY KEY(PAYLIST_NO)
);
CREATE TABLE NOTICE
(
    NOTICE_NO DOUBLE NOT NULL AUTO_INCREMENT,
    NOTICE_TITLE VARCHAR(300) NOT NULL,
    NOTICE_CONTENT VARCHAR(4000) NOT NULL,
    NOTICE_IP VARCHAR(30) NOT NULL,
    NOTICE_HIT DOUBLE NOT NULL,
    NOTICE_CREATED DATETIME NOT NULL,
    NOTICE_MODIFIED DATETIME NOT NULL,
    CONSTRAINT NOTICE_PK PRIMARY KEY(NOTICE_NO)
);
CREATE TABLE NOTICE_FILE_ATTACH
(
    NOTICE_FILE_ATTACH_NO DOUBLE NOT NULL AUTO_INCREMENT,
    NOTICE_NO DOUBLE NOT NULL,
    NOTICE_FILE_ATTACH_PATH VARCHAR(300),
    NOTICE_FILE_ATTACH_ORIGIN VARCHAR(300),
    NOTICE_FILE_ATTACH_SAVED VARCHAR(40),
    CONSTRAINT NOTICE_FILE_ATTACH_PK PRIMARY KEY(NOTICE_FILE_ATTACH_NO)
);
CREATE TABLE QUESTION
(
    QUESTION_NO DOUBLE NOT NULL AUTO_INCREMENT,
    MEMBER_ID VARCHAR(32) NOT NULL,
    QUESTION_TITLE VARCHAR(300) NOT NULL,
    QUESTION_CONTENT VARCHAR(4000),
    QUESTION_HIT DOUBLE,
    QUESTION_IP VARCHAR(32),
    QUESTION_CREATED DATETIME,
    CONSTRAINT QUESTION_PK PRIMARY KEY(QUESTION_NO)
);
CREATE TABLE ANSWER
(
    ANSWER_NO DOUBLE NOT NULL AUTO_INCREMENT,
    QUESTION_NO DOUBLE NOT NULL,
    ANSWER_CONTENT VARCHAR(4000) NOT NULL,
    ANSWER_CREATED DATETIME,
    CONSTRAINT ANSWER_PK PRIMARY KEY(ANSWER_NO)
);
CREATE TABLE REVIEW
(
    REVIEW_NO DOUBLE NOT NULL AUTO_INCREMENT,
    CLASS_CODE VARCHAR(100),
    REVIEW_SUBJECT VARCHAR(100),
    MEMBER_ID VARCHAR(32) NOT NULL,
    REVIEW_TITLE VARCHAR(300),
    REVIEW_CONTENT VARCHAR(4000),
    REVIEW_HIT DOUBLE,
    REVIEW_IP VARCHAR(32),
    REVIEW_CREATED DATETIME,
    REVIEW_STATE DOUBLE,
    REVIEW_DEPTH DOUBLE,
    REVIEW_GROUP_NO DOUBLE,
    REVIEW_GROUP_ORD DOUBLE,
    CONSTRAINT REVIEW_PK PRIMARY KEY(REVIEW_NO)
);
ALTER TABLE NOTICE_FILE_ATTACH
    ADD CONSTRAINT NOTICE_FILE_ATTACH_NOTICE_FK FOREIGN KEY(NOTICE_NO)
        REFERENCES NOTICE (NOTICE_NO)
            ON DELETE CASCADE;
ALTER TABLE QUESTION
    ADD CONSTRAINT QUESTION_MEMBER_FK FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
            ON DELETE CASCADE;
ALTER TABLE ANSWER
    ADD CONSTRAINT ANSWER_QUESTION_FK FOREIGN KEY (QUESTION_NO)
        REFERENCES QUESTION (QUESTION_NO)
            ON DELETE CASCADE;
ALTER TABLE REVIEW
    ADD CONSTRAINT REVIEW_CLASS_FK FOREIGN KEY (CLASS_CODE)
        REFERENCES CLASS (CLASS_CODE)
            ON DELETE CASCADE;
ALTER TABLE REVIEW
    ADD CONSTRAINT REVIEW_MEMBER_FK FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
            ON DELETE CASCADE;
ALTER TABLE PAYLIST
    ADD CONSTRAINT PAYLIST_MEMBER_FK FOREIGN KEY (MEMBER_NO)
        REFERENCES MEMBER (MEMBER_NO)
            ON DELETE CASCADE;
ALTER TABLE PAYLIST
    ADD CONSTRAINT PAYLIST_TICKET_FK FOREIGN KEY (TICKET_NO)
        REFERENCES TICKET (TICKET_NO)
            ON DELETE CASCADE;
ALTER TABLE CLASS
    ADD CONSTRAINT CLASS_LOCATION_FK FOREIGN KEY(LOCATION_CODE)
        REFERENCES LOCATION (LOCATION_CODE)
            ON DELETE CASCADE;
ALTER TABLE CLASS 
    ADD CONSTRAINT CLASS_TEACHER_FK FOREIGN KEY(TEACHER_NO) 
        REFERENCES TEACHER(TEACHER_NO)
            ON DELETE CASCADE;
ALTER TABLE RESERVATION 
    ADD CONSTRAINT RESERVATION_MEMBER_FK FOREIGN KEY(MEMBER_NO) 
        REFERENCES MEMBER(MEMBER_NO)
            ON DELETE CASCADE;
ALTER TABLE RESERVATION 
    ADD CONSTRAINT RESERVATION_CLASS_FK FOREIGN KEY(CLASS_CODE) 
        REFERENCES CLASS(CLASS_CODE)
            ON DELETE CASCADE;
ALTER TABLE MEMBER_LOG
    ADD CONSTRAINT MEMBER_LOG_MEMBER_FK FOREIGN KEY(MEMBER_NO)
        REFERENCES MEMBER(MEMBER_NO)
            ON DELETE CASCADE;
ALTER TABLE REMAIN_TICKET
    ADD CONSTRAINT REMAIN_TICKET_MEMBER_FK FOREIGN KEY(MEMBER_ID)
        REFERENCES MEMBER(MEMBER_ID)
            ON DELETE CASCADE;
            
DELIMITER $$
	CREATE TRIGGER SIGN_OUT_TRIGGER
	BEFORE DELETE
    ON MEMBER
    FOR EACH ROW
	BEGIN
		INSERT INTO SIGN_OUT_MEMBER
			(SIGN_OUT_MEMBER_NO, MEMBER_NO, MEMBER_ID, MEMBER_NAME, MEMBER_BIRTH, MEMBER_GENDER, MEMBER_PHONE, MEMBER_EMAIL, MEMBER_AGREE_STATE, MEMBER_SIGN_UP)
		VALUES
			(SIGN_OUT_MEMBER_SEQ.NEXTVAL, OLD.MEMBER_NO, OLD.MEMBER_ID, OLD.MEMBER_NAME, OLD.MEMBER_BIRTH, OLD.MEMBER_GENDER, OLD.MEMBER_PHONE, OLD.MEMBER_EMAIL, OLD.MEMBER_AGREE_STATE, OLD.MEMBER_SIGN_UP);
	END $$
DELIMITER ;
