-- 테이블 삭제
DROP TABLE SIGN_OUT_MEMBER;
DROP TABLE MEMBER_LOG;
DROP TABLE PAYLIST;
DROP TABLE TICKET;
DROP TABLE REMAIN_TICKET;
DROP TABLE ANSWER;
DROP TABLE QUESTION;
DROP TABLE REVIEW;
DROP TABLE NOTICE_FILE_ATTACH;
DROP TABLE NOTICE;
DROP TABLE RESERVATION;
DROP TABLE CLASS;
DROP TABLE LOCATION;
DROP TABLE TEACHER;
DROP TABLE MEMBER;


-- 테이블 생성
-- 회원
CREATE TABLE MEMBER
(
    MEMBER_NO NUMBER NOT NULL PRIMARY KEY,
    MEMBER_ID VARCHAR2(50 BYTE) NOT NULL UNIQUE,
    MEMBER_PW VARCHAR2(64 BYTE) NOT NULL,
    MEMBER_NAME VARCHAR2(20 BYTE) NOT NULL,
    MEMBER_BIRTH VARCHAR2(10 BYTE),
    MEMBER_GENDER VARCHAR2(1 BYTE),
    MEMBER_PHONE VARCHAR2(15 BYTE) NOT NULL,
    MEMBER_EMAIL VARCHAR2(200 BYTE),
    MEMBER_AGREE_STATE NUMBER NOT NULL,
    MEMBER_SIGN_UP DATE NOT NULL,
    MEMBER_PW_MODIFIED DATE NOT NULL
);

-- 회원 로그인 기록
CREATE TABLE MEMBER_LOG
(
    MEMBER_LOG_NO NUMBER NOT NULL PRIMARY KEY,
    MEMBER_NO NUMBER NOT NULL,
    MEMBER_LOG_SIGN_IN DATE NOT NULL
);

-- 탈퇴 회원
CREATE TABLE SIGN_OUT_MEMBER
(
    SIGN_OUT_MEMBER_NO NUMBER NOT NULL PRIMARY KEY,
    MEMBER_NO NUMBER NOT NULL,
    MEMBER_ID VARCHAR2(32 BYTE) NOT NULL UNIQUE,
    MEMBER_NAME VARCHAR2(20 BYTE) NOT NULL,
    MEMBER_BIRTH VARCHAR2(10 BYTE),
    MEMBER_GENDER VARCHAR2(1 BYTE),
    MEMBER_PHONE VARCHAR2(15 BYTE) NOT NULL,
    MEMBER_EMAIL VARCHAR2(200 BYTE),
    MEMBER_AGREE_STATE NUMBER NOT NULL,
    MEMBER_SIGN_UP DATE NOT NULL,
    SIGN_OUT_MEMBER_SIGN_OUT DATE
);

-- 강사
CREATE TABLE TEACHER
(
    TEACHER_NO NUMBER NOT NULL PRIMARY KEY,
    TEACHER_NAME VARCHAR2(20 BYTE) NOT NULL,
    TEACHER_GENDER VARCHAR2(1 BYTE) NOT NULL,
    TEACHER_SUBJECT VARCHAR2(100 BYTE) NOT NULL
);

-- 개설강좌
CREATE TABLE CLASS
(
    CLASS_CODE VARCHAR2(100 BYTE) NOT NULL PRIMARY KEY,
    TEACHER_NO NUMBER NOT NULL,
    LOCATION_CODE VARCHAR2(30 BYTE) NOT NULL,
    CLASS_DATE VARCHAR2(30 BYTE) NOT NULL,
    CLASS_TIME VARCHAR2(5 BYTE) NOT NULL
);

-- 장소
CREATE TABLE LOCATION
(
    LOCATION_CODE VARCHAR2(30 BYTE) NOT NULL PRIMARY KEY,
    LOCATION_LIMIT NUMBER NOT NULL
);

-- 예약내역
CREATE TABLE RESERVATION
(
    RESERVATION_CODE VARCHAR2(30 BYTE) NOT NULL PRIMARY KEY,
    MEMBER_NO NUMBER NOT NULL,
    CLASS_CODE VARCHAR2(100 BYTE) NOT NULL,
    RESERVATION_DATE TIMESTAMP NOT NULL,
    RESERVATION_STATE NUMBER NOT NULL
);

-- 수강권
CREATE TABLE TICKET
(
    TICKET_NO NUMBER NOT NULL PRIMARY KEY,
    TICKET_SUBJECT VARCHAR2(100 BYTE) NOT NULL,
    TICKET_COUNT NUMBER NOT NULL,
    TICKET_PERIOD NUMBER NOT NULL,
    TICKET_PRICE VARCHAR2(20 BYTE) NOT NULL
);

-- 잔여 수강권
CREATE TABLE REMAIN_TICKET
(
    REMAIN_TICKET_NO NUMBER NOT NULL PRIMARY KEY,
    MEMBER_ID VARCHAR2(32 BYTE) NOT NULL,
    REMAIN_TICKET_SUBJECT VARCHAR2(100 BYTE) NOT NULL,
    REMAIN_TICKET_END_DATE DATE NOT NULL,
    REMAIN_TICKET_REMAIN_COUNT NUMBER NOT NULL
);

-- 결제 내역
CREATE TABLE PAYLIST
(
    PAYLIST_NO NUMBER NOT NULL PRIMARY KEY,
    MEMBER_NO NUMBER NOT NULL,
    TICKET_NO NUMBER NOT NULL,
    PAYLIST_DATE DATE NOT NULL
);

-- 공지사항
CREATE TABLE NOTICE
(
    NOTICE_NO NUMBER NOT NULL PRIMARY KEY,
    NOTICE_TITLE VARCHAR2(300 BYTE) NOT NULL,
    NOTICE_CONTENT VARCHAR2(4000 BYTE) NOT NULL,
    NOTICE_IP VARCHAR2(30 BYTE) NOT NULL,
    NOTICE_HIT NUMBER NOT NULL,
    NOTICE_CREATED DATE NOT NULL,
    NOTICE_MODIFIED DATE NOT NULL
);

-- 공지사항 파일첨부
CREATE TABLE NOTICE_FILE_ATTACH
(
    NOTICE_FILE_ATTACH_NO NUMBER NOT NULL PRIMARY KEY,
    NOTICE_NO NUMBER NOT NULL,
    NOTICE_FILE_ATTACH_PATH VARCHAR2(300 BYTE),
    NOTICE_FILE_ATTACH_ORIGIN VARCHAR2(300 BYTE),
    NOTICE_FILE_ATTACH_SAVED VARCHAR2(40 BYTE)
);

-- QNA 질문
CREATE TABLE QUESTION
(
    QUESTION_NO NUMBER NOT NULL PRIMARY KEY,
    MEMBER_ID VARCHAR2(32 BYTE) NOT NULL,
    QUESTION_TITLE VARCHAR2(300 BYTE) NOT NULL,
    QUESTION_CONTENT VARCHAR2(4000 BYTE),
    QUESTION_HIT NUMBER,
    QUESTION_IP VARCHAR2(32 BYTE),
    QUESTION_CREATED DATE
);

-- QNA 답변
CREATE TABLE ANSWER 
(
    ANSWER_NO NUMBER NOT NULL PRIMARY KEY,
    QUESTION_NO NUMBER NOT NULL,
    ANSWER_CONTENT VARCHAR2(4000 BYTE) NOT NULL,
    ANSWER_CREATED DATE
);


-- 리뷰
CREATE TABLE REVIEW
(
    REVIEW_NO NUMBER NOT NULL PRIMARY KEY,
    CLASS_CODE VARCHAR2(100 BYTE),
    REVIEW_SUBJECT VARCHAR2(100 BYTE),
    MEMBER_ID VARCHAR2(32 BYTE) NOT NULL,
    REVIEW_TITLE VARCHAR2(300 BYTE),
    REVIEW_CONTENT VARCHAR2(4000 BYTE),
    REVIEW_HIT NUMBER,
    REVIEW_IP VARCHAR2(32 BYTE),
    REVIEW_CREATED DATE,
    REVIEW_STATE NUMBER,
    REVIEW_DEPTH NUMBER,
    REVIEW_GROUP_NO NUMBER,
    REVIEW_GROUP_ORD NUMBER
);



-- 외래키
ALTER TABLE NOTICE_FILE_ATTACH
    ADD CONSTRAINT NOTICE_FILE_ATTACH_NOTICE_FK FOREIGN KEY (NOTICE_NO)
        REFERENCES NOTICE (NOTICE_NO)
            ON DELETE CASCADE;
            
ALTER TABLE QUESTION
    ADD CONSTRAINT QUESTION_MEMBER_FK FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
            ON DELETE CASCADE;
            
ALTER TABLE ANSWER
    ADD CONSTRAINT ANSWER_QUESTION_FK FOREIGN KEY (QUESTION_NO)
        REFERENCES QUESTION (QUESTION_NO)
            ON DELETE CASCADE;
            
ALTER TABLE REVIEW
    ADD CONSTRAINT REVIEW_CLASS_FK FOREIGN KEY (CLASS_CODE)
        REFERENCES CLASS (CLASS_CODE)
            ON DELETE CASCADE;
            
ALTER TABLE REVIEW
    ADD CONSTRAINT REVIEW_MEMBER_FK FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
            ON DELETE CASCADE;
        
ALTER TABLE PAYLIST
    ADD CONSTRAINT PAYLIST_MEMBER_FK FOREIGN KEY (MEMBER_NO)
        REFERENCES MEMBER (MEMBER_NO)
            ON DELETE CASCADE;
        
ALTER TABLE PAYLIST
    ADD CONSTRAINT PAYLIST_TICKET_FK FOREIGN KEY (TICKET_NO)
        REFERENCES TICKET (TICKET_NO)
            ON DELETE CASCADE;
            
ALTER TABLE CLASS
    ADD CONSTRAINT CLASS_LOCATION_FK FOREIGN KEY(LOCATION_CODE)
        REFERENCES LOCATION (LOCATION_CODE)
            ON DELETE CASCADE;

ALTER TABLE CLASS 
    ADD CONSTRAINT CLASS_TEACHER_FK FOREIGN KEY(TEACHER_NO) 
        REFERENCES TEACHER(TEACHER_NO)
            ON DELETE CASCADE;

ALTER TABLE RESERVATION 
    ADD CONSTRAINT RESERVATION_MEMBER_FK FOREIGN KEY(MEMBER_NO) 
        REFERENCES MEMBER(MEMBER_NO)
            ON DELETE CASCADE;
    
ALTER TABLE RESERVATION 
    ADD CONSTRAINT RESERVATION_CLASS_FK FOREIGN KEY(CLASS_CODE) 
        REFERENCES CLASS(CLASS_CODE)
            ON DELETE CASCADE;
        
ALTER TABLE MEMBER_LOG
    ADD CONSTRAINT MEMBER_LOG_MEMBER_FK FOREIGN KEY(MEMBER_NO)
        REFERENCES MEMBER(MEMBER_NO)
            ON DELETE CASCADE;

ALTER TABLE REMAIN_TICKET
    ADD CONSTRAINT REMAIN_TICKET_MEMBER_FK FOREIGN KEY(MEMBER_ID)
        REFERENCES MEMBER(MEMBER_ID)
            ON DELETE CASCADE;

        
-- 시퀀스
DROP SEQUENCE MEMBER_SEQ;
DROP SEQUENCE MEMBER_LOG_SEQ;
DROP SEQUENCE SIGN_OUT_MEMBER_SEQ;
DROP SEQUENCE COURSE_SEQ;
DROP SEQUENCE TEACHER_SEQ;
DROP SEQUENCE NOTICE_FILE_ATTACH_SEQ ;
DROP SEQUENCE QUESTION_SEQ;
DROP SEQUENCE ANSWER_SEQ;
DROP SEQUENCE REVIEW_SEQ;
DROP SEQUENCE NOTICE_SEQ;
DROP SEQUENCE TICKET_SEQ;
DROP SEQUENCE PAYLIST_SEQ;
DROP SEQUENCE REMAIN_TICKET_SEQ;
DROP SEQUENCE SWIM_SEQ;
DROP SEQUENCE DANCE_SEQ;
DROP SEQUENCE SPINNING_SEQ;
DROP SEQUENCE PILATES_SEQ;

CREATE SEQUENCE MEMBER_SEQ NOCACHE;
CREATE SEQUENCE MEMBER_LOG_SEQ NOCACHE;
CREATE SEQUENCE SIGN_OUT_MEMBER_SEQ NOCACHE;
CREATE SEQUENCE COURSE_SEQ NOCACHE;
CREATE SEQUENCE TEACHER_SEQ NOCACHE;
CREATE SEQUENCE NOTICE_FILE_ATTACH_SEQ NOCACHE;
CREATE SEQUENCE QUESTION_SEQ NOCACHE;
CREATE SEQUENCE ANSWER_SEQ NOCACHE;
CREATE SEQUENCE REVIEW_SEQ NOCACHE;
CREATE SEQUENCE NOTICE_SEQ NOCACHE;
CREATE SEQUENCE TICKET_SEQ NOCACHE;
CREATE SEQUENCE PAYLIST_SEQ NOCACHE;
CREATE SEQUENCE REMAIN_TICKET_SEQ NOCACHE;
CREATE SEQUENCE SWIM_SEQ NOCACHE;
CREATE SEQUENCE DANCE_SEQ NOCACHE;
CREATE SEQUENCE SPINNING_SEQ NOCACHE;
CREATE SEQUENCE PILATES_SEQ NOCACHE;


-- 트리거 구성
-- MEMBER 테이블의 정보가 삭제되면 SIGN_OUT_MEMBER 테이블로 해당 정보가 저장되는 트리거
CREATE OR REPLACE TRIGGER SIGN_OUT_TRIGGER
    AFTER DELETE
    ON MEMBER
    FOR EACH ROW
BEGIN
    INSERT INTO SIGN_OUT_MEMBER
        (SIGN_OUT_MEMBER_NO, MEMBER_NO, MEMBER_ID, MEMBER_NAME, MEMBER_BIRTH, MEMBER_GENDER, MEMBER_PHONE, MEMBER_EMAIL, MEMBER_AGREE_STATE, MEMBER_SIGN_UP)
    VALUES
        (SIGN_OUT_MEMBER_SEQ.NEXTVAL, :OLD.MEMBER_NO, :OLD.MEMBER_ID, :OLD.MEMBER_NAME, :OLD.MEMBER_BIRTH, :OLD.MEMBER_GENDER, :OLD.MEMBER_PHONE, :OLD.MEMBER_EMAIL, :OLD.MEMBER_AGREE_STATE, :OLD.MEMBER_SIGN_UP);
END SIGN_OUT_TRIGGER;